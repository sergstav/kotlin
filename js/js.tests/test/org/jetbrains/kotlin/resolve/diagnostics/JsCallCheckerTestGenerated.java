/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.resolve.diagnostics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.InnerTestClasses;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({JsCallCheckerTestGenerated.UnderlinePlainText.class, JsCallCheckerTestGenerated.UnderlineHtml.class})
@RunWith(JUnit3RunnerWithInners.class)
public class JsCallCheckerTestGenerated extends AbstractJsCallCheckerTest {
    @TestMetadata("js/js.translator/testData/jsCode/underlinePlainText")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnderlinePlainText extends AbstractJsCallCheckerTest {
        @TestMetadata("1.test")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/jsCode/underlinePlainText/1.test");
            doUnderlinePlainTextTest(fileName);
        }

        @TestMetadata("2.test")
        public void test2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/jsCode/underlinePlainText/2.test");
            doUnderlinePlainTextTest(fileName);
        }

        @TestMetadata("3.test")
        public void test3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/jsCode/underlinePlainText/3.test");
            doUnderlinePlainTextTest(fileName);
        }

        public void testAllFilesPresentInUnderlinePlainText() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/jsCode/underlinePlainText"), Pattern.compile("^(.+)\\.test$"), true);
        }
    }

    @TestMetadata("js/js.translator/testData/jsCode/underlineHtml")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnderlineHtml extends AbstractJsCallCheckerTest {
        @TestMetadata("1.test")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/jsCode/underlineHtml/1.test");
            doUnderlineHtmlTest(fileName);
        }

        @TestMetadata("2.test")
        public void test2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/jsCode/underlineHtml/2.test");
            doUnderlineHtmlTest(fileName);
        }

        @TestMetadata("3.test")
        public void test3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/jsCode/underlineHtml/3.test");
            doUnderlineHtmlTest(fileName);
        }

        public void testAllFilesPresentInUnderlineHtml() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/jsCode/underlineHtml"), Pattern.compile("^(.+)\\.test$"), true);
        }
    }
}
